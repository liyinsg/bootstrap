" Load vim-plug
set nocompatible
"set shell=/bin/bash
set rtp+=/usr/local/etc/vim
let g:rooter_change_directory_for_non_project_files = 'current'

if empty(glob("/usr/local/etc/vim/autoload/plug.vim"))
  silent !curl -fLo /usr/local/etc/vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("/usr/local/etc/vim/plugged")
" git wrapper
Plug 'tpope/vim-fugitive'
" show marks on left side
Plug 'kshenoy/vim-signature'
Plug 'morhetz/gruvbox'
Plug 'bling/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', {'do': './install --bin --all'}
Plug 'junegunn/fzf.vim'
Plug 'jez/vim-superman'
Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lspinstall'
Plug 'nvim-lua/completion-nvim'
call plug#end()	         " required
filetype plugin indent on	 " required

" theme
set t_Co=256
set background=dark
let g:gruvbox_contrast_light='hard'
let g:gruvbox_contrast_dark='hard'
if &term =~ '256color' || &term == 'nvim'
  let g:gruvbox_italic=1
endif
colorscheme gruvbox
set guifont=Fantasque\ Sans\ Mono\ 15

" airline
set hidden
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline_detect_spell=0
let g:airline#extensions#wordcount#enabled = 0
let g:airline_mode_map = {
   \ 'n'  : 'N',
   \ 'i'  : 'I',
   \ 'v'  : 'V',
   \ 'V'  : 'VL',
   \ '' : 'VB',
   \ }
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" TMUX
if exists('$TMUX') && !exists('$NORENAME')
  au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
  au VimLeave * call system('tmux set-window automatic-rename on')
endif

" quickfix
au FileType qf nnoremap <silent> <C-j> :cn<CR>
au FileType qf nnoremap <silent> <C-k> :cp<CR>
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction
function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction
nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>

" completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
set completeopt=menuone,noinsert,noselect
let g:completion_enable_snippet = 'UltiSnips'
autocmd BufEnter * lua require'completion'.on_attach()

" fzf
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)
command! -nargs=* -bang RG call fzf#vim#grep("rg --column --line-number --no-heading --color=always --case-sensitive -- ".shellescape(<q-args>), 1, fzf#vim#with_preview(), <bang>0)
nnoremap <silent> <C-p> :execute system('git rev-parse --is-inside-work-tree') =~ 'true' ? 'GFiles' : 'Files'<CR>
nnoremap <silent> <leader><Tab> :Buffers<CR>
nnoremap <silent> <leader>f :RG <C-R><C-W><CR>
nnoremap <silent> gt :Rg<CR>
nnoremap <silent> gc :BCommits<CR>
nnoremap <silent> gl :Lines<CR>
nnoremap <silent> gh :History<CR>
nnoremap <silent> gH :History:<CR>
nnoremap <silent> ml :Marks<CR>
nnoremap <silent> gz :Helptags<CR>
nnoremap <silent> gZ :Filetypes<CR>

" nvim-lsp
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gc', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', 'gq', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "g=", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "g=", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
  end
end
local function make_config()
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true
  return {
    -- enable snippet support
    capabilities = capabilities,
    -- map buffer local keybindings when the language server attaches
    on_attach = on_attach,
  }
end
require'lspinstall'.setup() -- important
local servers = require'lspinstall'.installed_servers()
for _, lsp in pairs(servers) do
  local config = make_config()
  nvim_lsp[lsp].setup(config)
end
EOF
nnoremap <silent> <S-Tab> :ClangdSwitchSourceHeader<CR>
"set updatetime=500
"autocmd CursorHold * lua vim.lsp.buf.hover()

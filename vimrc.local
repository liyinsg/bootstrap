" Load vim-plug
set nocompatible
set shell=/bin/bash
set rtp+=/usr/local/etc/vim
let g:coc_user_config ={
	\	"languageserver": {
	\		"ccls": {
	\			"command": "ccls",
	\			"filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
	\			"rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/", ".svn", ".root"],
	\			"initializationOptions": {"cache": {"directory": ".ccls-cache"}}
	\		}
	\	}
	\}

if empty(glob("/usr/local/etc/vim/autoload/plug.vim"))
  silent !curl -fLo /usr/local/etc/vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin("/usr/local/etc/vim/plugged")
Plug 'morhetz/gruvbox'
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'kshenoy/vim-signature'
Plug 'terryma/vim-multiple-cursors'
Plug 'derekwyatt/vim-fswitch'
Plug 'dyng/ctrlsf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'junegunn/fzf', {'do': './install --bin --all'}
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
" Plug 'leafgarland/typescript-vim'
Plug 'w0rp/ale'
Plug 'jez/vim-superman'
Plug 'neoclide/coc.nvim', {'do': './install.sh nightly'}
Plug 'ludovicchabant/vim-gutentags'
call plug#end()	         " required
filetype plugin indent on	 " required

" theme
set t_Co=256
set background=dark
let g:gruvbox_contrast_dark='hard'
if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
  let g:gruvbox_italic=1
endif
colorscheme gruvbox

" Use Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" gvim font
set guifont=Fantasque\ Sans\ Mono\ 15

" Fswitch
nnoremap <silent> <S-Tab> :FSHere<CR>

" CtrlSF
let g:ctrlsf_case_sensitive='yes'
nmap <silent> <leader>f <Plug>CtrlSFCwordExec
nnoremap <silent> <leader>v <Esc>:CtrlSFToggle<CR>

" airline
set hidden
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline_detect_spell=0
let g:airline#extensions#wordcount#enabled = 0
let g:airline_mode_map = {
   \ 'n'  : 'N',
   \ 'i'  : 'I',
   \ 'v'  : 'V',
   \ 'V'  : 'VL',
   \ '' : 'VB',
   \ }
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" easy motion
let g:EasyMotion_do_mapping = 0
map <silent> <leader>s <Plug>(easymotion-s)
map <silent> \ <Plug>(easymotion-s2)
map <silent> <leader>j <Plug>(easymotion-j)
map <silent> <leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0

" TMUX
if exists('$TMUX') && !exists('$NORENAME')
  au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
  au VimLeave * call system('tmux set-window automatic-rename on')
endif

" ale linter
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'typescript': ['tslint'],
\}
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 200
let g:ale_sign_error='✗'
let g:ale_sign_warning='⚠'
let g:ale_cpp_clang_options='-std=c++17 -Wall -Wextra'
let g:ale_cpp_clangcheck_options='-std=c++17 -Wall -Wextra'
let g:ale_cpp_ccls_init_options = {
\   'cache': {
\       'directory': ('/tmp/ccls/cache'),
\   },
\ }

" fzf
nnoremap <silent> <C-p> :execute system('git rev-parse --is-inside-work-tree') =~ 'true' ? 'GFiles' : 'Files'<CR>
nnoremap <silent> <leader><Tab> :Buffers<CR>
nnoremap <silent> <leader>F :Ag <C-R><C-W><CR>
nnoremap <silent> gt :Tags<CR>
nnoremap <silent> gT :BCommits<CR>
nnoremap <silent> gl :Lines<CR>
nnoremap <silent> gL :BLines<CR>
nnoremap <silent> gh :History<CR>
nnoremap <silent> gH :History:<CR>
nnoremap <silent> ml :Marks<CR>
nnoremap <silent> gz :Helptags<CR>
nnoremap <silent> gZ :Filetypes<CR>

" ctags
set tags=./.tags;,.tags
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', 'compile_commands.json']
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" coc
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
set updatetime=300
au CursorHold * silent call CocActionAsync('highlight')
au CursorHoldI * sil call CocActionAsync('showSignatureHelp')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" caller
nmap <silent> gc <Plug>(coc-references)
" callee
nn <silent> gC :call CocLocations('ccls','$ccls/call',{'callee':v:true})<cr>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gD <Plug>(coc-type-definition)
